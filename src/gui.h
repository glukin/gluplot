// generated by Fast Light User Interface Designer (fluid) version 1.0107

#ifndef gui_h
#define gui_h
#include <FL/Fl.H>
#include "gluplot.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_File_Chooser.h>
#include <FL/Fl_File_Icon.H>
#include <cstdlib>
#include <FL/Fl_Color_Chooser.H>
#include <FL/fl_ask.H>
#include <string>
#include <FL/Fl_Help_Dialog.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Return_Button.H>
#include <cctype>
#include <algorithm>
#include <FL/Fl_Button.H>
#include <iostream>

class glpUI {
  bool _3D, _volume;
  const char * colsopt;
  const char * sliceopt;
  bool _fullscreen;
  int _x4fs, _y4fs, _w4fs, _h4fs;
  bool _clipping;
  const char *clipplane1, *clipplane2, *clipplane3, *clipplane4, *clipplane5;
#ifdef WIN32
#endif
#if !defined (WIN32) && !defined(__APPLE__)
#ifdef HAVE_XPM
#endif
#ifndef HAVE_XPM
#endif
#endif
public:
  glpUI();
private:
  Fl_Double_Window *self;
  fluplot *pout;
  static Fl_Menu_Item menu_[];
  void cb_Clear_i(Fl_Menu_*, void*);
  static void cb_Clear(Fl_Menu_*, void*);
  void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
  void cb_Input_i(Fl_Menu_*, void*);
  static void cb_Input(Fl_Menu_*, void*);
  void cb_dots_i(Fl_Menu_*, void*);
  static void cb_dots(Fl_Menu_*, void*);
  static Fl_Menu_Item *style1;
  void cb_style1_i(Fl_Menu_*, void*);
  static void cb_style1(Fl_Menu_*, void*);
  void cb_points_i(Fl_Menu_*, void*);
  static void cb_points(Fl_Menu_*, void*);
  void cb_linespoints_i(Fl_Menu_*, void*);
  static void cb_linespoints(Fl_Menu_*, void*);
  void cb_xerrorbars_i(Fl_Menu_*, void*);
  static void cb_xerrorbars(Fl_Menu_*, void*);
  void cb_yerrorbars_i(Fl_Menu_*, void*);
  static void cb_yerrorbars(Fl_Menu_*, void*);
  void cb_xyerrorbars_i(Fl_Menu_*, void*);
  static void cb_xyerrorbars(Fl_Menu_*, void*);
  void cb_xerrorlines_i(Fl_Menu_*, void*);
  static void cb_xerrorlines(Fl_Menu_*, void*);
  void cb_yerrorlines_i(Fl_Menu_*, void*);
  static void cb_yerrorlines(Fl_Menu_*, void*);
  void cb_xyerrorlines_i(Fl_Menu_*, void*);
  static void cb_xyerrorlines(Fl_Menu_*, void*);
  void cb_impulses_i(Fl_Menu_*, void*);
  static void cb_impulses(Fl_Menu_*, void*);
  void cb_coloredlines_i(Fl_Menu_*, void*);
  static void cb_coloredlines(Fl_Menu_*, void*);
  static Fl_Menu_Item *style2;
  void cb_style2_i(Fl_Menu_*, void*);
  static void cb_style2(Fl_Menu_*, void*);
  void cb_errorbars_i(Fl_Menu_*, void*);
  static void cb_errorbars(Fl_Menu_*, void*);
  void cb_errorlines_i(Fl_Menu_*, void*);
  static void cb_errorlines(Fl_Menu_*, void*);
  void cb_lighting_i(Fl_Menu_*, void*);
  static void cb_lighting(Fl_Menu_*, void*);
  void cb_logarithmic_i(Fl_Menu_*, void*);
  static void cb_logarithmic(Fl_Menu_*, void*);
  void cb_logarithmic1_i(Fl_Menu_*, void*);
  static void cb_logarithmic1(Fl_Menu_*, void*);
  void cb_logarithmic2_i(Fl_Menu_*, void*);
  static void cb_logarithmic2(Fl_Menu_*, void*);
  void cb_autoscale_i(Fl_Menu_*, void*);
  static void cb_autoscale(Fl_Menu_*, void*);
  void cb_ticks_i(Fl_Menu_*, void*);
  static void cb_ticks(Fl_Menu_*, void*);
  void cb_grid_i(Fl_Menu_*, void*);
  static void cb_grid(Fl_Menu_*, void*);
  void cb_key_i(Fl_Menu_*, void*);
  static void cb_key(Fl_Menu_*, void*);
  void cb_common_i(Fl_Menu_*, void*);
  static void cb_common(Fl_Menu_*, void*);
  void cb_background_i(Fl_Menu_*, void*);
  static void cb_background(Fl_Menu_*, void*);
  void cb_foreground_i(Fl_Menu_*, void*);
  static void cb_foreground(Fl_Menu_*, void*);
  void cb_negative_i(Fl_Menu_*, void*);
  static void cb_negative(Fl_Menu_*, void*);
  void cb_fullscreen_i(Fl_Menu_*, void*);
  static void cb_fullscreen(Fl_Menu_*, void*);
  void cb_clipping_i(Fl_Menu_*, void*);
  static void cb_clipping(Fl_Menu_*, void*);
  void cb_rainbow_i(Fl_Menu_*, void*);
  static void cb_rainbow(Fl_Menu_*, void*);
  void cb_hot_i(Fl_Menu_*, void*);
  static void cb_hot(Fl_Menu_*, void*);
  void cb_ocean_i(Fl_Menu_*, void*);
  static void cb_ocean(Fl_Menu_*, void*);
  void cb_terrain_i(Fl_Menu_*, void*);
  static void cb_terrain(Fl_Menu_*, void*);
  void cb_traditional_i(Fl_Menu_*, void*);
  static void cb_traditional(Fl_Menu_*, void*);
  void cb_grayscale_i(Fl_Menu_*, void*);
  static void cb_grayscale(Fl_Menu_*, void*);
  void cb_8x13_i(Fl_Menu_*, void*);
  static void cb_8x13(Fl_Menu_*, void*);
  void cb_9x15_i(Fl_Menu_*, void*);
  static void cb_9x15(Fl_Menu_*, void*);
  void cb_helvetica_i(Fl_Menu_*, void*);
  static void cb_helvetica(Fl_Menu_*, void*);
  void cb_helvetica1_i(Fl_Menu_*, void*);
  static void cb_helvetica1(Fl_Menu_*, void*);
  void cb_helvetica2_i(Fl_Menu_*, void*);
  static void cb_helvetica2(Fl_Menu_*, void*);
  void cb_times_i(Fl_Menu_*, void*);
  static void cb_times(Fl_Menu_*, void*);
  void cb_times1_i(Fl_Menu_*, void*);
  static void cb_times1(Fl_Menu_*, void*);
  void cb_About_i(Fl_Menu_*, void*);
  static void cb_About(Fl_Menu_*, void*);
  void cb_Manual_i(Fl_Menu_*, void*);
  static void cb_Manual(Fl_Menu_*, void*);
  Fl_Double_Window *input;
  static Fl_Menu_Item menu_1[];
  void cb_3D_i(Fl_Menu_*, void*);
  static void cb_3D(Fl_Menu_*, void*);
  static Fl_Menu_Item *vol;
  void cb_vol_i(Fl_Menu_*, void*);
  static void cb_vol(Fl_Menu_*, void*);
  Fl_Input *icols;
  Fl_Input *islice;
  void cb_OK_i(Fl_Return_Button*, void*);
  static void cb_OK(Fl_Return_Button*, void*);
  void cb_Cancel_i(Fl_Button*, void*);
  static void cb_Cancel(Fl_Button*, void*);
  void cb_Clear1_i(Fl_Button*, void*);
  static void cb_Clear1(Fl_Button*, void*);
  Fl_Double_Window *clipping;
  static Fl_Menu_Item menu_2[];
  void cb_Clipping_i(Fl_Menu_*, void*);
  static void cb_Clipping(Fl_Menu_*, void*);
  void cb_OK1_i(Fl_Return_Button*, void*);
  static void cb_OK1(Fl_Return_Button*, void*);
  void cb_Cancel1_i(Fl_Button*, void*);
  static void cb_Cancel1(Fl_Button*, void*);
  void cb_Clear2_i(Fl_Button*, void*);
  static void cb_Clear2(Fl_Button*, void*);
  Fl_Input *clip1;
  Fl_Input *clip2;
  Fl_Input *clip3;
  Fl_Input *clip4;
  Fl_Input *clip5;
public:
  void show(int argc, char**argv);
};
#endif
